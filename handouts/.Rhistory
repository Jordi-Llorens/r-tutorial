labels = rownames(mtcars),
las = 2,
cex.axis = 0.7)
abline(v = seq_along(mtcars$mpg),
col = "gray",
lty = 2)
legend(x = "bottomleft", ncol = 3, cex = 0.6,
bg = "white",
legend = c("4 cyl", "6 cyl", "8 cyl"),
text.col = "azure4",
col = c(4, 6, 8), pch = 16)
paste("Barcelona", "GSE")
paste("Barcelona", "GSE", sep = "-")
paste0("Barcelona", "GSE")
paste("The Life of", pi)
paste("Class of 201", 4:7, sep = "")
nchar(c("How", "many", "characters?"))
nchar("How many characters?")
tolower("Barcelona GSE")
toupper(c("Barcelona", "GSE"))
substr("Barcelona GSE", start = 11, stop = 13)
days <- c("Mond", "Tues", "Wedn")
substr(days, 4, 4) <- "."
days
chartr(old = "4", new = "a", "B4rcelon4 GSE")
chartr(old = "4", new = "a", "B4rcelon4 GSE")
chartr(old = "410", new = "aio",
"B4rcel0n4 Gr4du4te Sch00l of Ec0n0m1cs")
abbreviate(c("Statistical Models", "Deterministic Models",
"Data Warehousing"), minlength = 8)
abbreviate(c("Asset Pricing", "Corporate Finance",
"Econometrics"), minlength = 8)
abbreviate(c("Asset Pricing", "Corporate Finance",
"Econometrics"), minlength = 5)
## Import
agingPopulation <- read.table("data/aging-population-2008.csv",
header = TRUE,
sep = ",",
quote = "\"")
## Rename last column
names(agingPopulation)
names(agingPopulation)[7] <- "PercentSeniors"
## Data summary
summary(agingPopulation)
sapply(agingPopulation, class)
names(agingPopulation)
sapply(agingPopulation,class)
head(agingPopulation$Total.Population)
gsub(',','',agingPopulation$Total.Population)
chartr(',','',agingPopulation$Total.Population)
?chartr
as.numeric(gsub(',','',agingPopulation$Total.Population))
head(agingPopulation$PercentSeniors,5)
agingPopulation$Total.Population <-
as.numeric(gsub(',','',agingPopulation$Total.Population))
agingPopulation$PercentSeniors <-
as.numeric(gsub('%','',agingPopulation$PercentSeniors))
sapply(agingPopulation, class)
lm(mpg ~ cyl, data=mtcars)
library(ggplot2)
ls("package:datasets")
data(package = .packages(all.available = TRUE))
names(mpg)
b <- ggplot(mpg, aes(fl))
# maps
map <- map_data("state")
install.packages('maps')
# maps
map <- map_data("state")
state = tolower(rownames(USArrests))
l <- ggplot(data, aes(fill=murder))
data <- data.frame(murder = USArrests$Murder,
rm(list=ls())
library(ggplot2)
# maps
map <- map_data("state")
data <- data.frame(murder = USArrests$Murder,
state = tolower(rownames(USArrests)))
l <- ggplot(data, aes(fill=murder))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
seals
# seals
dim(seals)
# seals
names(seals)
nz <- map_data("nz")
nzmap <- ggplot(nz, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", colour="black")
plot(nzmap)
?map_data
nz <- map_data("spain")
maps::world()
example(map_data )
library(mapproj)
install.packages('mapproj')
example(geom_map)
example(geom_map)
rm(list=ls())
library(ggplot2)
# maps
map <- map_data("state")
data <- data.frame(murder = USArrests$Murder,
state = tolower(rownames(USArrests)))
l <- ggplot(data, aes(fill=murder))
l + geom_map(aes(map_id = state), map = map)+
expand_limits(x = map$long, y = map$lat)+
xlab('')+ylab('')
pause()
nz <- map_data("")
nzmap <- ggplot(nz, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", colour="black")
plot(nzmap)
?geom_map
# Hint: use tapply()
tapply(mtcars$hp, mtcars$cyl, mean)
# hint: combine group_by() and summarise() with the pipe %<%.
mtcars %>% group_by(cyl) %>% summarise(meanHP = mean(hp))
if (!require(dplyr)){
install.packages('dplyr',repos='https://cloud.r-project.org')
library(dplyr)
}
# hint: combine group_by() and summarise() with the pipe %>%.
mtcars %>% group_by(cyl) %>% summarise(meanHP = mean(hp))
tapply(mtcars$hp, list(mtcars$cyl,mtcars$am), FUN = mean)
# hint: use vapply()
vapply(mtcars, fivenum, c(Min=0,'1Q'=0,Median=0,'3Q'=0,Max=0))
# hint: use vapply()
vapply(mtcars, fivenum, c(Min=0,1Q=0,Median=0,'3Q'=0,Max=0))
# hint: use vapply()
vapply(mtcars, fivenum, c(Min=0,'1Q'=0,Median=0,'3Q'=0,Max=0))
tapply(mtcars$wt, mtcars$carb, fivenum)
if(!require(hflights)){
install.packages('hflights',repos='https://cloud.r-project.org')
library(hflights)
}
head(hflights, 5)
# filter flights with Dest = 'BPT'
hflights %>% filter( Dest == 'BPT')
dptest2 <- hflights[hflights$Dest == 'BPT', ]
dptest2
# select columnts UniqueCarrier, Origin, Dest, and from Year to DayofMonth.
# hint: to select multiple columns, use the : symbol.
dptest <- hflights %>% select(UniqueCarrier, Origin, Dest, Year:DayofMonth)
dptest
# sort dptest by Month (decreasing) as first criterion and then by DayofMonth (decreasing)
hflights %>% arrange(desc(Month),desc(DayofMonth))
mutate(dptest, newVar = (Month + DayofMonth)/2 )
# change Origin to lowercase
mutate(dptest, Origin = tolower(Origin))
summarize(
hflights_df,
dep_delay = mean(DepDelay, na.rm = TRUE),
arr_delay = mean(ArrDelay, na.rm = TRUE)
)
hflights_df <- as_tibble(hflights)
hflights_df
summarize(
hflights_df,
dep_delay = mean(DepDelay, na.rm = TRUE),
arr_delay = mean(ArrDelay, na.rm = TRUE)
)
origin_day <- group_by(hflights_df, Origin, DayOfWeek)
delays <- summarize(origin_day,
dep_delay = mean(DepDelay, na.rm = TRUE),
arr_delay = mean(ArrDelay, na.rm = TRUE)
)
delays
exmpl <- hflights_df %>%  # data source
filter(Origin == "IAH") %>%  # subset rows
select(UniqueCarrier, DepDelay) %>%  # subset columns
group_by(UniqueCarrier) %>%  # group by carrier
summarize(dep_delay =
round(mean(DepDelay, na.rm = TRUE),2)) %>%
arrange(dep_delay)
head(exmpl)
hflights %>%
mutate(isDelayed = ArrDelay > 0) %>%
group_by(UniqueCarrier) %>%
summarise(pctgDelayed = mean(isDelayed, na.rm=T)*100)
hflights %>%
mutate(isDelayed = ArrDelay > 0) %>%
group_by(UniqueCarrier) %>%
summarise(pctgDelayed = mean(isDelayed, na.rm=T)*100,
.groups = 'drop')
hflights %>%
group_by(UniqueCarrier) %>%
summarise(pctgCancelled = mean(Cancelled)*100,
.groups = 'drop')
# Solution
hflights %>%
filter( !is.na(ActualElapsedTime) ) %>%
mutate(speed = 60 * Distance / ActualElapsedTime ,
flightLength = ifelse(ActualElapsedTime < 180, 'short','mediumlong')) %>%
group_by(UniqueCarrier, flightLength) %>%
summarise(AvgSpeed = mean(speed, na.rm=T),
.groups='drop')
if(!require(ggplot2)){
install.packages('ggplot2',repos='https://cloud.r-project.org')
library(ggplot2)
}
# hint: the departure airport variable is Origin.
table(hflights$Origin)
# hint: before we had table(x), but we can do table(x,y)
# we can even do table(x,y,z,...) !!
table(hflights$Origin, hflights$Cancelled)
# hint: use is.na() on the ActualElapsedTime column, then use table()
table(is.na(hflights$ActualElapsedTime))
carrier_table <- data.frame(table(Carrier=hflights$UniqueCarrier,
Airport=hflights$Origin))
head(carrier_table)
carrier_xtabs <- as.data.frame(xtabs(~Origin +
UniqueCarrier, data = hflights))
# hint: qplot() with fill = Origin and geom = 'bar'.
qplot(data = hflights,
x = UniqueCarrier,
fill = Origin,
geom = 'bar')
# 1) build a table by carrier with percentage of delayed flights
# Suppose that a flight is delayed if ArrDelay > 0.
# You may use tapply(), or the dplyr package. Watch out since there are NAs.
# YOUR CODE
delays <- hflights %>%
mutate(isDelayed = ArrDelay > 0) %>%
group_by(UniqueCarrier) %>%
summarise(pctgDelay = mean(isDelayed, na.rm=T)*100) %>%
arrange(pctgDelay)
head(delays)
# 2) draw the barplot combining ggplot() and
# geom_bar(stat='identity',fill='darkblue')
# with the + symbol.
ggplot(data=delays,
aes(x = UniqueCarrier, y = pctgDelay))+
geom_bar(stat='identity',fill='darkblue')+
coord_flip()
qplot(data = hflights,
x = Origin,
y = ActualElapsedTime,
geom = 'boxplot')
qplot(data = hflights,
x = UniqueCarrier,
y = ActualElapsedTime,
geom = 'boxplot')
# Remove NAs in the TaxiOut column and keep only TaxiOut <= 30
hist_data <- hflights %>% filter(!is.na(TaxiOut),
TaxiOut <= 30)
# use qplot() on the hist_data to plot a histogram of the TaxiOut variable for
# each different airport (one on top of the other).
# hint: use the facets argument with the Origin variable: facets = Origin ~.
# the final dot is part of the syntax!
# set binwidth = 1.
qplot(data = hist_data,
x = TaxiOut,
geom = 'histogram')
# Remove NAs in the TaxiOut column and keep only TaxiOut <= 30
hist_data <- hflights %>% filter(!is.na(TaxiOut),
TaxiOut <= 30)
# use qplot() on the hist_data to plot a histogram of the TaxiOut variable for
# each different airport (one on top of the other).
# hint: use the facets argument with the Origin variable: facets = Origin ~.
# the final dot is part of the syntax!
# set binwidth = 1.
qplot(data = hist_data,
x = TaxiOut,
geom = 'histogram',
facets = Origin ~.,
binwidth = 1)
# Solution:
hflights %>%
mutate(Month_as_Date = as.Date(paste0('2020-',Month,'-01')) ) %>%
group_by(UniqueCarrier, Month_as_Date) %>%
summarise(pctgCancelled = mean(Cancelled)*100,
.groups = 'drop') %>%
ggplot(aes(x = Month_as_Date, y = pctgCancelled))+
geom_line()+
geom_point()+
facet_wrap(~UniqueCarrier,ncol=3)+
scale_x_date(date_labels = '%b')+
xlab('Month')+
ylab('% of flights cancelled')+
ggtitle('Cancelled flights by month and carrier')
# hint: use qplot() and geom='point' for a scatterplot.
# Do it just for January so that code executes faster
qplot(
data = hflights %>% filter(Month == 1),
x = DepDelay,
y = ArrDelay,
geom = 'point'
)
# Compute correlation between DepDelay and ArrDelay using cor().
# Hint: there are NAs, so use the argument use = 'complete.obs'
cor(hflights$DepDelay, hflights$ArrDelay, use = 'complete.obs')
# Regress ArrDelay on DepDelay, only for January flights
linmod <- lm(ArrDelay ~ DepDelay, data=hflights %>% filter(Month==1))
coef(linmod)
# Solution:
ggplot(data = hflights %>% filter(Month == 1),
aes(x = DepDelay, y = ArrDelay, color=factor(Origin))) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "lm",
formula = 'y ~ x',
size = 0.7,
color = "darkred") +
scale_x_continuous("Departure delay",
limits = c(-50, 400),
breaks = seq(-50, 400, 50)) +
scale_y_continuous("Arrival delay",
limits = c(-50, 400),
breaks = seq(-50, 400, 50)) +
scale_color_manual(name = "Airport in\nHouston",
values = c("darkblue", "black")) +
annotate("text", x = 50, y = 350, size = 5,
label = paste0("Intercept =", round(linmod$coefficients[1],2),
"\nSlope =", round(linmod$coefficients[2],2))) +
theme(panel.background = element_blank(),
legend.key = element_rect(fill="#FFFFFF"),
legend.title=element_text(size=12),
legend.text = element_text(size=12),
axis.line = element_line(colour = "darkgrey", size=0.5),
axis.text = element_text(size=12),
axis.ticks = element_line(size = 0.5),
axis.title.y = element_text(vjust = 1.8, size=16),
axis.title.x = element_text(vjust = -.8, size=16))
summary(linmod)
coef(linmod)
cat('SUMMARY\n')
summary(linmod)
coef(linmod)
cat('SUMMARY\n')
summary(linmod)
cat('COEFFICIENTS ONLY')
coef(linmod)
cat('SUMMARY\n')
summary(linmod)
cat('COEFFICIENTS ONLY\n')
coef(linmod)
delay_mod <- lm(ArrDelay~ DepDelay + Origin + Distance,
data=hflights %>% filter(Month==1))
coef(delay_mod)
delay_mod <- lm(ArrDelay~ DepDelay + Origin + Distance,
data=hflights
coef(delay_mod)
delay_mod <- lm(ArrDelay~ DepDelay + Origin + Distance,
data=hflights)
coef(delay_mod)
delay_mod <- lm(ArrDelay~ DepDelay + Origin + Distance,
data=hflights)
summary(delay_mod)
coef(delay_mod)
delay_mod <- lm(ArrDelay~ DepDelay + Origin + Distance,
data=hflights)
summary(delay_mod)
library(tidyr)
last_month <- 3
fdur <- hflights_df %>%
filter(AirTime > 0 & Month %in% 1:last_month) %>%
group_by(Month, TailNum) %>%
summarize(total_airtime = round(sum(AirTime)))
print(fdur)
detach("package:tidyr", unload = TRUE)
remove.packages("tidyr")
if (!require(tidyr)){
install.packages('tidyr',repos='https://cloud.r-project.org')
library(tidyr)
}
if (!require(tidyr)){
install.packages('tidyr',repos='https://cloud.r-project.org')
library(tidyr)
}
if (!require(tidyr)){
install.packages('tidyr',repos='https://cloud.r-project.org')
library(tidyr)
}
last_month <- 3
fdur <- hflights_df %>%
filter(AirTime > 0 & Month %in% 1:last_month) %>%
group_by(Month, TailNum) %>%
summarize(total_airtime = round(sum(AirTime)))
hflights_df <- as_tibble(hflights)
if(!require(hflights)){
install.packages('hflights',repos='https://cloud.r-project.org')
library(hflights)
}
if (!require(tidyr)){
install.packages('tidyr',repos='https://cloud.r-project.org')
library(tidyr)
}
last_month <- 3
fdur <- hflights_df %>%
filter(AirTime > 0 & Month %in% 1:last_month) %>%
group_by(Month, TailNum) %>%
summarize(total_airtime = round(sum(AirTime)))
hflights_df <- as_tibble(hflights)
hflights_df
if (!require(tidyr)){
install.packages('tidyr',repos='https://cloud.r-project.org')
library(tidyr)
}
last_month <- 3
fdur <- hflights_df %>%
filter(AirTime > 0 & Month %in% 1:last_month) %>%
group_by(Month, TailNum) %>%
summarize(total_airtime = round(sum(AirTime)))
names(hflights)
View(hflights_df)
fdur <- hflights_df %>%
filter(AirTime > 0 & Month %in% 1:last_month)
fdur <- hflights_df %>%
filter(AirTime > 0 , Month %in% 1:last_month)
library(dplyr)
if (!require(tidyr)){
install.packages('tidyr',repos='https://cloud.r-project.org')
library(tidyr)
}
last_month <- 3
fdur <- hflights_df %>%
filter(AirTime > 0 & Month %in% 1:last_month) %>%
group_by(Month, TailNum) %>%
summarize(total_airtime = round(sum(AirTime)))
print(fdur)
fdur_wide <- spread(
fdur,         # table to make wider
Month,        # key defining columns
total_airtime # values to fill columns
)
names(fdur_wide)[2:4] <-
paste0(month.abb[1:last_month],"-2011")
print(fdur_wide)
fdur_long <- gather(
fdur_wide,     # table to make longer
Month,         # new column of observation ids
total_airtime, # new column of observation values
-TailNum,      # exclude variable from gathering
na.rm = TRUE   # remove missing values
)
print(fdur_long)
separate(
fdur_long,  # data
Month,      # column to separate
into = c("Month", "Year"), # new columns
sep = "-"   # separating expression (regex)
)
fdur %>% filter(TailNum == "N0EGMQ") %>%
spread(Month, total_airtime)
# select columnts UniqueCarrier, Origin, Dest, and from Year to DayofMonth.
# hint: to select multiple columns, use the : symbol.
dptest <- hflights %>% select(UniqueCarrier, Origin, Dest, Year:DayofMonth)
as_tibble(dptest)
# sort dptest by Month (decreasing) as first criterion and then by DayofMonth (decreasing)
hflights %>% arrange(desc(Month),desc(DayofMonth)) %>% as_tibble()
# simulate draws (many) to check the veracity of these formulae
# these are called monte carlo simulations.
# Simulate 4000 draws, obtain the sample average and sample variance.
# Plot a barplot of the draws.
draws <- sample(dice, 4000, replace = TRUE)
# define a dice of 12 faces and use "sample" function to draw 4 dice throws
dice <- 1:12
# simulate draws (many) to check the veracity of these formulae
# these are called monte carlo simulations.
# Simulate 4000 draws, obtain the sample average and sample variance.
# Plot a barplot of the draws.
draws <- sample(dice, 4000, replace = TRUE)
barplot(table(draws))
par(mfrow=c(2,2))
sizes <- c(3, 10, 20, 100)
for (s in 1:length(sizes)){
MC <- MCexperiment(size=sizes[s])
# how does it correspond to a normal distribution
hist(MC, breaks = 16, xlim = c(1,12), probability = TRUE,
main = paste0('Size = ',sizes[s]) )
xfit <- seq(min(MC),max(MC),length=40)
yfit <- dnorm(xfit, mean = mean(MC), sd = sd(MC))
lines(xfit, yfit, col="blue", lwd=2)
}
# now compute the distribution of the mean of a sample of size n = 3?
# Save the simulated sample means in a vector named MC
MCexperiment <- function(size){
set.seed(1234)
MC <- rep(NA, 10000)
for (i in 1:length(MC)){
MC[i] <- mean(sample(dice, size=size, replace = T))
}
return(MC)
}
# define a dice of 12 faces and use "sample" function to draw 4 dice throws
dice <- 1:12
sample(dice, 4, replace = TRUE)
par(mfrow=c(2,2))
sizes <- c(3, 10, 20, 100)
for (s in 1:length(sizes)){
MC <- MCexperiment(size=sizes[s])
# how does it correspond to a normal distribution
hist(MC, breaks = 16, xlim = c(1,12), probability = TRUE,
main = paste0('Size = ',sizes[s]) )
xfit <- seq(min(MC),max(MC),length=40)
yfit <- dnorm(xfit, mean = mean(MC), sd = sd(MC))
lines(xfit, yfit, col="blue", lwd=2)
}
# what happens if you increase the sample size to 20?
# recognize the Law of Large Numbers
set.seed(1234)
MC <- rep(NA, 10000)
for (i in 1:length(MC)){
MC[i] <- mean(sample(dice, size=20, replace = T))
}
hist(MC, breaks = 16, xlim = c(1,12), probability = TRUE)
xfit <- seq(min(MC),max(MC),length=40)
yfit <- dnorm(xfit, mean = mean(MC), sd = sd(MC))
lines(xfit, yfit, col="blue", lwd=2)
